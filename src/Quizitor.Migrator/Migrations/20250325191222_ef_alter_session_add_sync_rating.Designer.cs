// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Quizitor.Data;

#nullable disable

namespace Quizitor.Migrator.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250325191222_ef_alter_session_add_sync_rating")]
    partial class ef_alter_session_add_sync_rating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Quizitor.Data.Entities.Bot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("DropPendingUpdates")
                        .HasColumnType("boolean")
                        .HasColumnName("drop_pending_updates");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("token");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Username")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_bot");

                    b.ToTable("bot", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.BotCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BotType")
                        .HasColumnType("integer")
                        .HasColumnName("bot_type");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("command");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_bot_command");

                    b.HasIndex("BotType", "Command")
                        .IsUnique()
                        .HasDatabaseName("ix_bot_command_bot_type_command");

                    b.ToTable("bot_command", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.BotInteraction", b =>
                {
                    b.Property<string>("BotUsername")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("bot_username");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset>("LastInteraction")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_interaction");

                    b.HasKey("BotUsername", "UserId")
                        .HasName("pk_bot_interaction");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_bot_interaction_user_id");

                    b.ToTable("bot_interaction", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Events.QuestionTimingNotify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("LastRunAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_run_at");

                    b.Property<DateTimeOffset>("RunAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("run_at");

                    b.Property<int>("TimingId")
                        .HasColumnType("integer")
                        .HasColumnName("timing_id");

                    b.HasKey("Id")
                        .HasName("pk_question_timing_notify");

                    b.HasIndex("TimingId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_timing_notify_timing_id");

                    b.ToTable("question_timing_notify", "events");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Events.QuestionTimingStop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("LastRunAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_run_at");

                    b.Property<int>("QuestionPageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("question_page_number");

                    b.Property<int>("RoundPageNumber")
                        .HasColumnType("integer")
                        .HasColumnName("round_page_number");

                    b.Property<DateTimeOffset>("RunAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("run_at");

                    b.Property<int>("TimingId")
                        .HasColumnType("integer")
                        .HasColumnName("timing_id");

                    b.HasKey("Id")
                        .HasName("pk_question_timing_stop");

                    b.HasIndex("TimingId")
                        .IsUnique()
                        .HasDatabaseName("ix_question_timing_stop_timing_id");

                    b.ToTable("question_timing_stop", "events");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_game");

                    b.ToTable("game", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Mailing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_mailing");

                    b.ToTable("mailing", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Attempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("attempts");

                    b.Property<bool>("AutoClose")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_close");

                    b.Property<string>("Comment")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("comment");

                    b.Property<int?>("NotificationTime")
                        .HasColumnType("integer")
                        .HasColumnName("notification_time");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("text");

                    b.Property<int>("Time")
                        .HasColumnType("integer")
                        .HasColumnName("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("RoundId", "Number")
                        .IsUnique()
                        .HasDatabaseName("ix_question_round_id_number");

                    b.ToTable("question", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cost")
                        .HasColumnType("integer")
                        .HasColumnName("cost");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_question_option");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_option_question_id");

                    b.ToTable("question_option", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.QuestionRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cost")
                        .HasColumnType("integer")
                        .HasColumnName("cost");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_question_rule");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_rule_question_id");

                    b.ToTable("question_rule", "public");

                    b.HasDiscriminator<string>("type").HasValue("QuestionRule");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Quizitor.Data.Entities.QuestionTiming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<DateTimeOffset?>("StopTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("stop_time");

                    b.HasKey("Id")
                        .HasName("pk_question_timing");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_timing_question_id");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_question_timing_session_id");

                    b.ToTable("question_timing", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("system_name");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("SystemName")
                        .IsUnique()
                        .HasDatabaseName("ix_role_system_name");

                    b.ToTable("role", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("system_name");

                    b.HasKey("Id")
                        .HasName("pk_role_permission");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_permission_role_id");

                    b.ToTable("role_permission", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_round");

                    b.HasIndex("GameId", "Number")
                        .IsUnique()
                        .HasDatabaseName("ix_round_game_id_number");

                    b.ToTable("round", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<bool>("SyncRating")
                        .HasColumnType("boolean")
                        .HasColumnName("sync_rating");

                    b.HasKey("Id")
                        .HasName("pk_session");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_session_game_id");

                    b.ToTable("session", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Submission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("text");

                    b.Property<int>("Time")
                        .HasColumnType("integer")
                        .HasColumnName("time");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_submission");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_submission_question_id");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_submission_session_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_submission_team_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_submission_user_id");

                    b.ToTable("submission", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("name");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_team");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_team_owner_id");

                    b.ToTable("team", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.TeamLeader", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("TeamId", "SessionId")
                        .HasName("pk_team_leader");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_team_leader_user_id");

                    b.HasIndex("SessionId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_team_leader_session_id_user_id");

                    b.ToTable("team_leader", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.TeamMember", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.HasKey("UserId", "SessionId")
                        .HasName("pk_team_member");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_team_member_session_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_team_member_team_id");

                    b.ToTable("team_member", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("first_name");

                    b.Property<int?>("GameAdminId")
                        .HasColumnType("integer")
                        .HasColumnName("game_admin_id");

                    b.Property<int?>("GameServerId")
                        .HasColumnType("integer")
                        .HasColumnName("game_server_id");

                    b.Property<string>("LastName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("last_name");

                    b.Property<int?>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<string>("Username")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("GameAdminId")
                        .HasDatabaseName("ix_user_game_admin_id");

                    b.HasIndex("GameServerId")
                        .HasDatabaseName("ix_user_game_server_id");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_user_session_id");

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("system_name");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_permission");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_permission_user_id");

                    b.ToTable("user_permission", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.UserPrompt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BotId")
                        .HasColumnType("integer")
                        .HasColumnName("bot_id");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("subject");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_prompt");

                    b.HasIndex("BotId")
                        .HasDatabaseName("ix_user_prompt_bot_id");

                    b.HasIndex("UserId", "BotId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_prompt_user_id_bot_id");

                    NpgsqlIndexBuilderExtensions.AreNullsDistinct(b.HasIndex("UserId", "BotId"), true);

                    b.ToTable("user_prompt", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId")
                        .HasName("pk_user_role");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_role_user_id");

                    b.ToTable("user_role", "public");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.AnyAnswerQuestionRule", b =>
                {
                    b.HasBaseType("Quizitor.Data.Entities.QuestionRule");

                    b.ToTable("question_rule", "public");

                    b.HasDiscriminator().HasValue("any_answer");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.BotInteraction", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bot_interaction_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Events.QuestionTimingNotify", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.QuestionTiming", "Timing")
                        .WithMany()
                        .HasForeignKey("TimingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_timing_notify_question_timing_timing_id");

                    b.Navigation("Timing");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Events.QuestionTimingStop", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.QuestionTiming", "Timing")
                        .WithMany()
                        .HasForeignKey("TimingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_timing_stop_question_timing_timing_id");

                    b.Navigation("Timing");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Question", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.Round", "Round")
                        .WithMany("Questions")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_round_round_id");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.QuestionOption", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_option_question_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.QuestionRule", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.Question", "Question")
                        .WithMany("Rules")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_rule_question_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.QuestionTiming", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.Question", "Question")
                        .WithMany("Timings")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_timing_question_question_id");

                    b.HasOne("Quizitor.Data.Entities.Session", "Session")
                        .WithMany("Timings")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_timing_session_session_id");

                    b.Navigation("Question");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.RolePermission", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_role_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Round", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.Game", "Game")
                        .WithMany("Rounds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_round_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Session", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.Game", "Game")
                        .WithMany("Sessions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Submission", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.Question", "Question")
                        .WithMany("Submissions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submission_question_question_id");

                    b.HasOne("Quizitor.Data.Entities.Session", "Session")
                        .WithMany("Submissions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submission_session_session_id");

                    b.HasOne("Quizitor.Data.Entities.Team", "Team")
                        .WithMany("Submissions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_submission_team_team_id");

                    b.HasOne("Quizitor.Data.Entities.User", "User")
                        .WithMany("Submissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_submission_user_user_id");

                    b.Navigation("Question");

                    b.Navigation("Session");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Team", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.User", "Owner")
                        .WithMany("OwnedTeams")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_user_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.TeamLeader", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.Session", "Session")
                        .WithMany("TeamLeaders")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_leader_session_session_id");

                    b.HasOne("Quizitor.Data.Entities.Team", "Team")
                        .WithMany("Leaders")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_leader_team_team_id");

                    b.HasOne("Quizitor.Data.Entities.User", "User")
                        .WithMany("TeamLeadership")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_team_leader_user_user_id");

                    b.Navigation("Session");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.TeamMember", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.Session", "Session")
                        .WithMany("TeamMembers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_member_session_session_id");

                    b.HasOne("Quizitor.Data.Entities.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_member_team_team_id");

                    b.HasOne("Quizitor.Data.Entities.User", "User")
                        .WithMany("TeamMembership")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_team_member_user_user_id");

                    b.Navigation("Session");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.User", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.Bot", "GameAdmin")
                        .WithMany("GameAdminUsers")
                        .HasForeignKey("GameAdminId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user_bot_game_admin_id");

                    b.HasOne("Quizitor.Data.Entities.Bot", "GameServer")
                        .WithMany("GameServerUsers")
                        .HasForeignKey("GameServerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user_bot_game_server_id");

                    b.HasOne("Quizitor.Data.Entities.Session", "Session")
                        .WithMany("Users")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user_session_session_id");

                    b.Navigation("GameAdmin");

                    b.Navigation("GameServer");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.UserPermission", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_permission_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.UserPrompt", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.Bot", "Bot")
                        .WithMany("Prompts")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_prompt_bot_bot_id");

                    b.HasOne("Quizitor.Data.Entities.User", "User")
                        .WithMany("Prompts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_prompt_user_user_id");

                    b.Navigation("Bot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.UserRole", b =>
                {
                    b.HasOne("Quizitor.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_role_id");

                    b.HasOne("Quizitor.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Bot", b =>
                {
                    b.Navigation("GameAdminUsers");

                    b.Navigation("GameServerUsers");

                    b.Navigation("Prompts");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Game", b =>
                {
                    b.Navigation("Rounds");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Question", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Rules");

                    b.Navigation("Submissions");

                    b.Navigation("Timings");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Round", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Session", b =>
                {
                    b.Navigation("Submissions");

                    b.Navigation("TeamLeaders");

                    b.Navigation("TeamMembers");

                    b.Navigation("Timings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.Team", b =>
                {
                    b.Navigation("Leaders");

                    b.Navigation("Members");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("Quizitor.Data.Entities.User", b =>
                {
                    b.Navigation("OwnedTeams");

                    b.Navigation("Permissions");

                    b.Navigation("Prompts");

                    b.Navigation("Submissions");

                    b.Navigation("TeamLeadership");

                    b.Navigation("TeamMembership");
                });
#pragma warning restore 612, 618
        }
    }
}
